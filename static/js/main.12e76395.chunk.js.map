{"version":3,"sources":["components/Todo/Todo.tsx","actions/actions.ts","components/TodoList/TodoList.tsx","api/api.ts","constants/constants.ts","App.tsx","utils/utils.ts","reducers/reducer.ts","store.ts","index.tsx"],"names":["mapDispatchToProps","setDelete","id","type","payload","connect","todo","user","title","completed","className","name","onClick","TodoList","todos","map","Todo","key","getData","url","fetch","then","response","json","getPreparedTodos","a","users","preparedTodos","find","userId","setLoad","isLoading","setNewTodos","setSortBy","sortBy","state","clickHandler","e","currentTarget","filteredTodos","useMemo","sort","todoA","todoB","localeCompare","length","disabled","initialState","store","createStore","action","filter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.12e76395.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { deleteTodo } from '../../actions/actions';\n\ninterface Props {\n  todo: TodoWithUser;\n  setDelete: (id: number) => void;\n}\n\nconst TodoLayout: React.FC<Props> = ({ todo, setDelete }) => {\n  const {\n    id,\n    user,\n    title,\n    completed,\n  } = todo;\n\n  return (\n    <tr className=\"table__row\">\n      <td className=\"table__cell\">{id}</td>\n      <td className=\"table__cell\">{user.name}</td>\n      <td className=\"table__cell\">{title}</td>\n      <td className=\"table__cell\">{`${completed}`}</td>\n      <td className=\"table__cell\">\n        <button\n          type=\"button\"\n          onClick={() => setDelete(id)}\n        >\n          Delete\n        </button>\n      </td>\n    </tr>\n  );\n};\n\nconst mapDispatchToProps = {\n  setDelete: deleteTodo,\n};\n\nexport default connect(null, mapDispatchToProps)(TodoLayout);\n","export const TYPE_LOADING = 'loading';\nexport const TYPE_SET_TODOS = 'set_todos';\nexport const TYPE_SORT = 'sort';\nexport const TYPE_DELETE = 'delete';\n\nexport const setLoading = (isLoading: boolean) => ({\n  type: TYPE_LOADING,\n  payload: isLoading,\n});\n\nexport const setTodos = (todos: TodoWithUser[]) => ({\n  type: TYPE_SET_TODOS,\n  payload: todos,\n});\n\nexport const setSort = (sortBy: string) => ({\n  type: TYPE_SORT,\n  payload: sortBy,\n});\n\nexport const deleteTodo = (id: number) => ({\n  type: TYPE_DELETE,\n  payload: id,\n});\n","import React, { FC } from 'react';\nimport Todo from '../Todo/Todo';\nimport './TodoList.css';\n\ninterface Props {\n  todos: TodoWithUser[];\n}\n\nexport const TodoList: FC<Props> = ({ todos }) => {\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr className=\"table__row table__row_thead\">\n          <th className=\"table__cell\">#</th>\n          <th className=\"table__cell\">Name</th>\n          <th className=\"table__cell\">Title</th>\n          <th className=\"table__cell\">Status</th>\n          <th className=\"table__cell\">-</th>\n        </tr>\n      </thead>\n      <tbody>\n        {todos.map(todo => (\n          <Todo key={todo.id} todo={todo} />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { USERS_URL, TODOS_URL } from '../constants/constants';\n\nexport const getData = <T>(url: string): Promise<T> => {\n  return fetch(url)\n    .then(response => response.json());\n};\n\nconst getUsers = (usersUrl: string): Promise<User[]> => {\n  return getData(usersUrl);\n};\n\nconst getTodos = (todosUrl: string): Promise<Todo[]> => {\n  return getData(todosUrl);\n};\n\nexport const getPreparedTodos = async (): Promise<TodoWithUser[]> => {\n  const todos = await getTodos(TODOS_URL);\n  const users = await getUsers(USERS_URL);\n\n  const preparedTodos = todos.map(todo => ({\n    ...todo,\n    user: users.find(user => user.id === todo.userId) as User,\n  }));\n\n  return preparedTodos;\n};\n","export const USERS_URL = 'https://jsonplaceholder.typicode.com/users';\nexport const TODOS_URL = 'https://jsonplaceholder.typicode.com/todos';\n","import React, { FC, MouseEvent, useMemo } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { setLoading, setTodos, setSort } from './actions/actions';\nimport { getPreparedTodos } from './api/api';\nimport { sort } from './utils/utils';\n\ninterface Props {\n  setLoad: (value: boolean) => void;\n  setNewTodos: (value: TodoWithUser[]) => void;\n  setSortBy: (value: string) => void;\n  todos: TodoWithUser[];\n  isLoading: boolean;\n  sortBy: string;\n\n}\n\nconst App: FC<Props> = ({\n  setLoad,\n  setNewTodos,\n  setSortBy,\n  todos,\n  sortBy,\n  isLoading,\n}) => {\n  const loadHandler = () => {\n    setLoad(true);\n    getPreparedTodos().then(preparedTodos => {\n      setNewTodos(preparedTodos);\n    });\n  };\n\n  const clickHandler = (e: MouseEvent<HTMLButtonElement>) => {\n    const { name } = e.currentTarget;\n\n    setSortBy(name);\n  };\n\n  const filteredTodos = useMemo(() => sort(sortBy, todos), [sortBy, todos]);\n\n  if (!todos.length) {\n    return (\n      <div className=\"button-container\">\n        <h1>Dynamic list of TODOs</h1>\n        <button\n          className=\"button\"\n          type=\"button\"\n          disabled={isLoading}\n          onClick={loadHandler}\n        >\n          {isLoading ? 'Loading...' : 'Load Todos'}\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic list of TODOs</h1>\n      <p>\n        <span>Todos: </span>\n        {todos.length}\n      </p>\n      <div className=\"buttons-container\">\n        <button\n          className=\"button\"\n          name=\"title\"\n          type=\"button\"\n          onClick={clickHandler}\n        >\n          Sort by title\n        </button>\n        <button\n          className=\"button\"\n          name=\"name\"\n          type=\"button\"\n          onClick={clickHandler}\n        >\n          Sort by name\n        </button>\n        <button\n          className=\"button\"\n          name=\"completed\"\n          type=\"button\"\n          onClick={clickHandler}\n        >\n          Sort by completed\n        </button>\n      </div>\n      <TodoList todos={filteredTodos} />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  todos: state.todos,\n  isLoading: state.isLoading,\n  sortBy: state.sortBy,\n});\n\nconst mapDispatchToProps = {\n  setLoad: setLoading,\n  setNewTodos: setTodos,\n  setSortBy: setSort,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","export const sort = (sortBy: string, todos: TodoWithUser[]): TodoWithUser[] => {\n  switch (sortBy) {\n    case 'name': {\n      return [...todos].sort((todoA, todoB) => (\n        todoA.user.name.localeCompare(todoB.user.name)\n      ));\n      break;\n    }\n\n    case 'title': {\n      return [...todos].sort((todoA, todoB) => (\n        todoA.title.localeCompare(todoB.title)\n      ));\n      break;\n    }\n\n    case 'completed': {\n      return [...todos].sort((todoA, todoB) => (+todoA.completed - +todoB.completed));\n      break;\n    }\n\n    default: return todos;\n  }\n};\n","import { AnyAction } from 'redux';\nimport {\n  TYPE_LOADING,\n  TYPE_SET_TODOS,\n  TYPE_SORT,\n  TYPE_DELETE,\n} from '../actions/actions';\n\nconst initialState: State = {\n  todos: [],\n  isLoading: false,\n  sortBy: '',\n};\n\n\nexport const rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case TYPE_LOADING: {\n      return {\n        ...state,\n        isLoading: action.payload,\n      };\n    }\n\n    case TYPE_SET_TODOS: {\n      return {\n        ...state,\n        todos: action.payload,\n      };\n    }\n\n    case TYPE_SORT: {\n      return {\n        ...state,\n        sortBy: action.payload,\n      };\n    }\n\n    case TYPE_DELETE: {\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.payload),\n      };\n    }\n\n    default: return state;\n  }\n};\n","import { createStore } from 'redux';\nimport { rootReducer } from './reducers/reducer';\n\nexport const store = createStore(rootReducer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './store';\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}